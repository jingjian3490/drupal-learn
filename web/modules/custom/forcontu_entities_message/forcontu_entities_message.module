<?php

/**
 * @file
 * Provides a message entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function forcontu_entities_message_theme(): array {
  return [
    'forcontu_entities_message' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for message templates.
 *
 * Default template: forcontu-entities-message.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the message information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_forcontu_entities_message(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function forcontu_entities_message_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish messages.
      $storage = \Drupal::entityTypeManager()->getStorage('forcontu_entities_message');
      $forcontu_entities_message_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($forcontu_entities_message_ids) as $forcontu_entities_message) {
        $forcontu_entities_message->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize messages.
      $storage = \Drupal::entityTypeManager()->getStorage('forcontu_entities_message');
      $forcontu_entities_message_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($forcontu_entities_message_ids) as $forcontu_entities_message) {
        $forcontu_entities_message->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function forcontu_entities_message_user_predelete(UserInterface $account): void {
  // Delete messages that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('forcontu_entities_message');
  $forcontu_entities_message_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($forcontu_entities_message_ids)
  );
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function forcontu_entities_message_theme_suggestions_forcontu_entities_message(array $variables) {
  \Drupal::logger('log')->notice('<pre>' . print_r('logger', TRUE) . '</pre>');
  $suggestions = [];
  $entity = $variables['elements']['#forcontu_entities_message'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'forcontu_entities_message__' . $sanitized_view_mode;
  $suggestions[] = 'forcontu_entities_message__' . $entity->bundle();
  $suggestions[] = 'forcontu_entities_message__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'forcontu_entities_message__' . $entity->id();
  $suggestions[] = 'forcontu_entities_message__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}


/**
 * Implements hook_theme_suggestions_HOOK().
 */
function forcontu_entities_message_theme_suggestions_forcontu_entities_message_alter(array &$suggestions, array $variables) {
  $entity = $variables['elements']['#forcontu_entities_message'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'forcontu_entities_message__' . $sanitized_view_mode;
  $suggestions[] = 'forcontu_entities_message__' . $entity->bundle() . 'aaaaa';

}
